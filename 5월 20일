1. 부족한 ui 해상도 보충(첫페이지 UI는 일부러 윗쪽을 살짝 밖으로 뒀는데 ui 해상도가 맞아떨어지지 않아서 수정함(유튜브 이미지 픽셀 수정 및 삭제 이미지 수정 윗 줄 컨테이너 랑 
깃허브,티스토리 관련 컨테이너 수정, 설정 창 추가, 첫 페이지 게시판 박스 컨테이너 수정 등)

2. 각각 나누어져서 활용하기 힘든 부분 유지보수 하기 좋게 div 컨테이너로 묶어서 약간씩 해상도 줄이면 오류 있는 부분 수정(250px이상까지는 잘 동작)
오늘 할 일
미디어쿼리로 230px까지 보장


js vs 타임리프
js 장점이 css 스타일에 함수 넣는 게 가능한데,
이런걸 사용하려면 타임리프에서 html로 font-size를 작성하거나, css에서 사용하지 않을 클래스 타입을 여러개 만들어서
th:className 으로 className에 적용 시킬 클래스 반환으로 적용 시켜야 되기 떄문에 좋은 코드가 안나올 껏 같다고 판단해서 js로 짜고 있다.
반대로 Js에서 짠다면 css에서 굳이 만들 지 않아도 js 안에서 추가해서 넣을 수 있고, 
정적인 환경의 스타일은 css로 처리하되, 동적인 로직이나 계산은 js에서 처리하는게 맞냐 vs 스타일 관련 내용은 css에서 처리하되 js를 css에서 사용하냐의 차이이다
즉 전자는 css에서 js가 들어있고, 후자는 js에서 css가 들어가 있는 차이이다 
나의 경우에는 전자가 좋아보이기도 하는데, 전자는 변수로 잡으면 내부적으로 js로직을 다시 살펴봐야되기 때문에 후자가 맞다고 판단해 후자를 사용했다
그 다음 고려할 점이 다시 본론으로 돌아와 타임리프 vs js인데, 타임리프의 경우 중간에 css도 봐야하고, th 함수로직도 봐야해서 좋지 않다고 판단했다
따라서 보이는 건 js로 구현하고, 복잡한 로직이나 서버에 값 넘겨주는거(get/post,redirect 등), db 처리 관련 로직은 서버 단에서 하는 게 맞다고 판단했다
페이지,테이블 계산하는 경우 도메인 관련 로직이라 js에서 처리하면 위험해 보이고, 서비스로직이나 비즈니스 로직에서 판단해서 주는 게 옳다고 판단했기 때문에 아래와 같이 실행하였다
